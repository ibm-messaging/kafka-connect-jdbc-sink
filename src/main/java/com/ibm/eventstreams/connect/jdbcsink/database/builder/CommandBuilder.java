/*
 *
 * Copyright 2023 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.ibm.eventstreams.connect.jdbcsink.database.builder;

import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import org.apache.kafka.connect.data.Schema;

import com.ibm.eventstreams.connect.jdbcsink.database.utils.DataSourceFactor;

public class CommandBuilder {

    public String getPostgreSQLFieldType(final Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INTEGER";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "REAL";
            case FLOAT64:
                return "DOUBLE PRECISION";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getDB2FieldType(final Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INTEGER";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "REAL";
            case FLOAT64:
                return "DOUBLE";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getMySQLFieldType(final Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INT";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "FLOAT";
            case FLOAT64:
                return "DOUBLE";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getIdColumnDefinition(final DataSourceFactor dataSourceFactor) {
        try {
            if (dataSourceFactor.isPostgreSQL()) {
                if (dataSourceFactor.getPostgresMajorVersion() <= 9) {
                    return "id SERIAL PRIMARY KEY";
                } else {
                    return "id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY";
                }
            } else if (dataSourceFactor.isDB2()) {
                return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
            } else if (dataSourceFactor.isMySQL()) {
                return "id INTEGER PRIMARY KEY AUTO_INCREMENT";
            }
        } catch (final SQLException e) {
            e.printStackTrace();
        }
        return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
    }

    public String buildInsertStatement(final String tableName, final List<String> fieldNames) {
        final StringBuilder sb = new StringBuilder();
        sb.append("INSERT INTO ").append(tableName);
        sb.append("(").append(String.join(", ", fieldNames)).append(")");
        sb.append(" VALUES ");
        sb.append("(").append(String.join(", ", Collections.nCopies(fieldNames.size(), "?"))).append(")");
        return sb.toString();
    }
}
